name: pull_req workflow
on:
  pull_request:
    branches: [main]
  push:
    branches:
      - a08-01
jobs:
  npm-install:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: install aws cli
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}              
      - name: switching to demo profile
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}
      - name: verify AWS account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "Switched to AWS Account: $ACCOUNT_ID"
      - name: Get the latest launch template in use
        id: get_latest_launch_template
        run: |
          TEMPLATE_DETAILS=$(aws ec2 describe-launch-templates --launch-template-names ec2-launch-template)
          
          LAUNCH_TEMPLATE_ID=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].LaunchTemplateId')
          DEFAULT_VERSION=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].DefaultVersionNumber')
          LATEST_VERSION=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].LatestVersionNumber')
          
          echo "LAUNCH_TEMPLATE_ID=${LAUNCH_TEMPLATE_ID}" >> $GITHUB_ENV
          echo "DEFAULT_VERSION=${DEFAULT_VERSION}" >> $GITHUB_ENV
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
      - name: Create launch template version with AMI ID
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --version-description "AMI Update $(date +%Y%m%d%H%M%S)" \
          --source-version "1" \
          --launch-template-data "ImageId=ami-0b21d3c16d3f51bae"
      - name: Trigger Instance Refresh
        id: trigger_instance_refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name csye6225_asg
          
      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name my-auto-scaling-group \
              --query 'InstanceRefreshes[?InstanceRefreshId==`'"$REFRESH_ID"'`].Status' \
              --output text)
            echo "Instance Refresh Status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance Refresh completed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance Refresh failed or was cancelled."
              exit 1
            else
              sleep 30
            fi
          done
                     