name: Packer build workflow
on:
  pull_request:
    types:
      - closed
  push:
    branches:
      - a08-demo
jobs:
  packer-build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: create .env
        run: |
          echo "${{ secrets.ENV_VARS }}" > .env
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '20.9.0'
      - name: install dependencies
        run: npm install
      - name: install aws cli
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}       
      - name: install postgres
        uses: ikalnytskyi/action-setup-postgres@v6
        with:
          username: ${{ secrets.PSQL_USER }}
          password: ${{ secrets.PSQL_PASS }}
          database: ${{ secrets.PSQL_DBNAME }}
          port: 5432
        id: postgres
      - name: integration test
        run: npm test
        env:
          POSTGRES_HOST: localhost
          PSQL_USER: ${{ secrets.PSQL_USER }}
          PSQL_PASS: ${{ secrets.PSQL_PASS }}
          PSQL_DBNAME: ${{ secrets.PSQL_DBNAME }}
          TEST_CHANGE_FIRSTNAME: ${{ secrets.TEST_CHANGE_FIRSTNAME}}
          TEST_CHANGE_PASSWORD: ${{ secrets.TEST_CHANGE_PASSWORD }}
          TEST_POSTDATA_EMAIL: ${{ secrets.TEST_POSTDATA_EMAIL }}
          TEST_POSTDATA_FIRSTNAME: ${{ secrets.TEST_POSTDATA_FIRSTNAME }}
          TEST_POSTDATA_LASTNAME: ${{ secrets.TEST_POSTDATA_LASTNAME }}
          TEST_POSTDATA_PASS: ${{ secrets.TEST_POSTDATA_PASS }}
          TOPIC_ARN: ${{ secrets.TOPIC_ARN }}
          ENVIRONMENT: "TEST"
          PORT: 5000
      - name: check completion
        run: echo "Check completion"
      - name: Zip webapp
        run: |
          [ -e webapp.zip] && rm -rf webapp.zip
          zip -r webapp.zip . -x ".git/*" ".github/*" ".env"
      - name: create variables.pkrvars.hcl
        run: |
          echo "${{ secrets.PKR_VARS }}" > variables.pkrvars.hcl      
      - name: setup packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
            version: 1.11.2
      - name: packer init
        run: packer init .
      - name: packer fmt
        run: packer fmt -check -recursive .
      - name: packer validate
        run: packer validate -var-file=variables.pkrvars.hcl .
      - name: packer build
        run: |
          packer build \
          -var-file=variables.pkrvars.hcl . | tee build_output.txt
          
      - name: pull latest ami
        run: |
          AMI_ID=$(aws ec2 describe-images --executable-users self --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Latest AMI: $AMI_ID"
      - name: switching to demo profile
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}
      - name: verify AWS account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "Switched to AWS Account: $ACCOUNT_ID"
      - name: Get the latest launch template in use
        id: get_latest_launch_template
        run: |
          TEMPLATE_DETAILS=$(aws ec2 describe-launch-templates --launch-template-names ec2-launch-template)
          
          LAUNCH_TEMPLATE_ID=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].LaunchTemplateId')
          DEFAULT_VERSION=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].DefaultVersionNumber')
          LATEST_VERSION=$(echo $TEMPLATE_DETAILS | jq -r '.LaunchTemplates[0].LatestVersionNumber')
          
          echo "LAUNCH_TEMPLATE_ID=${LAUNCH_TEMPLATE_ID}" >> $GITHUB_ENV
          echo "DEFAULT_VERSION=${DEFAULT_VERSION}" >> $GITHUB_ENV
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
      - name: Create launch template version with AMI ID
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --version-description "AMI Update $(date +%Y%m%d%H%M%S)" \
          --source-version "1" \
          --launch-template-data "ImageId=$AMI_ID"
      - name: Trigger Instance Refresh
        id: trigger_instance_refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.ASG_NAME}}
          
      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME}} \
              --query "InstanceRefreshes[0].Status" \
              --output text)
            echo "Instance Refresh Status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance Refresh completed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance Refresh failed or was cancelled."
              exit 1
            else
              sleep 30
            fi
          done